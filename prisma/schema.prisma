generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApplicationEnvironment {
  PRODUCTION
  STAGING
  DEVELOPMENT
  TEST
}

enum DataSource {
  DHM
  GLOFAS
  MANUAL
}

enum ActivityStatus {
  NOT_STARTED
  WORK_IN_PROGRESS
  COMPLETED
  DELAYED
}

enum Phases {
  PREPAREDNESS
  READINESS
  ACTIVATION
}

model Source {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  source String 
  riverBasin String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  
  SourcesData SourcesData[]
  DailyMonitoring DailyMonitoring[]
  Phase Phase[]

  @@map("tbl_sources")
  @@unique([source, riverBasin])
}

model SourcesData {
  id         Int    @id @default(autoincrement())

  sourceId   Int
  source     Source @relation(fields: [sourceId], references: [id])

  info       Json    @db.JsonB()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_sources_data")
}

model DailyMonitoring {
  id   Int    @id @default(autoincrement())

  dataEntryBy String
  info        Json    @db.JsonB()

  sourceId   Int
  source     Source @relation(fields: [sourceId], references: [id])

  isDeleted Boolean   @default(false)
  createdBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_daily_monitoring")
}

model Phase {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  name                      Phases  
  activeYear                DateTime

  requiredMandatoryTriggers Int?    @default(0)
  requiredOptionalTriggers  Int?    @default(0)

  receivedMandatoryTriggers Int? @default(0)
  receivedOptionalTriggers  Int? @default(0)

  canRevert        Boolean @default(false)
  canTriggerPayout Boolean @default(false)
  isActive         Boolean @default(false)
  sourceId         String

  activatedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt()

  source      Source     @relation(fields: [sourceId], references: [uuid])
  Trigger     Trigger[]
  Activity    Activity[]

  @@unique([sourceId, activeYear, name])
  @@map("tbl_phases")
}

model Trigger {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  app  String

  repeatKey        String     @unique
  repeatEvery      String?

  triggerStatement Json?      @db.JsonB()
  triggerDocuments Json?   @db.JsonB()
  notes            String?

  phase   Phase?  @relation(fields: [phaseId], references: [uuid])
  phaseId String?

  isMandatory Boolean @default(false)
  isTriggered Boolean @default(false)
  isDeleted   Boolean @default(false)

  triggeredBy String?

  triggeredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt()

  @@map("tbl_triggers")
}

model ActivityCategory {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  app  String

  name      String  
  isDeleted Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt()
  Activity  Activity[]

  @@unique([app, name])
  @@map("tbl_activity_categories")
}

model ActivityManager {
  id       String     @unique
  name     String
  email    String
  phone    String

  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt()

  Activity  Activity[]

  @@map("tbl_activity_managers")
}

model Activity {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  app  String

  title          String
  leadTime       String
  responsibility String

  phase      Phase?            @relation(fields: [phaseId], references: [uuid])
  phaseId    String
  category   ActivityCategory? @relation(fields: [categoryId], references: [uuid])
  categoryId String
  managerId  String?
  manager    ActivityManager?  @relation(fields: [managerId], references: [id])

  description String?
  notes       String?

  status ActivityStatus @default(NOT_STARTED)

  activityDocuments     Json? @db.JsonB()
  activityCommunication Json? @db.JsonB()
  activityPayout        Json? @db.JsonB()

  isAutomated Boolean @default(false)
  isDeleted   Boolean @default(false)

  completedBy String?
  completedAt DateTime?

  differenceInTriggerAndActivityCompletion String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activities")
}

model Application {
  cuid        String                 @id @default(cuid())
  name        String
  publicKey   String
  description String?
  environment ApplicationEnvironment

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  updatedBy String    @default("system")
  deletedAt DateTime?

  @@map("tbl_applications")
}
